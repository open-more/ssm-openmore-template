group 'org.openmore'
version '1.0-SNAPSHOT'

//sourceCompatibility = 1.8


apply plugin: 'war'
apply plugin: 'idea'
apply plugin: 'eclipse-wtp'

apply plugin: 'org.akhikhl.gretty'
apply plugin: 'org.flywaydb.flyway'
apply plugin: 'io.github.robwin.swagger2markup'
apply plugin: 'org.asciidoctor.convert'

//指定gradle wrapper版本
task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}


configurations {
    mybatisGenerator
}

//配置插件仓库
buildscript {

    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        jcenter()
    }

    dependencies {

        classpath 'org.akhikhl.gretty:gretty:1.2.4'
        classpath: 'mysql:mysql-connector-java:5.1.36'
        classpath "org.flywaydb:flyway-gradle-plugin:4.1.2"

        //swagger2markup
        classpath 'io.github.robwin:swagger2markup-gradle-plugin:0.9.2'
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        //使用org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.15版本导致 class org.bouncycastle.asn1.ASN1Primitive overrides final method equals.(Ljava/lang/Object;)Z
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.11'
        classpath 'io.github.robwin:swagger2markup-gradle-plugin:0.9.2'
    }
}

allprojects {
    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'https://jitpack.io' }
        jcenter()
    }
}

//gretty设置
gretty {
    port = 8080
    contextPath = "/"
}


ext {
    if (!project.hasProperty("env")) {
        println '没有配置数据环境，默认使用 开发环境'
        env = "dev"
    }

    asciiDocOutputDir = file("${projectDir}/src/docs/asciidoc")
    swaggerOutputDir = file("${projectDir}/src/docs/swagger")
}

def getDbProperties = {
    def properties = new Properties()
    def dbPropertiesPath = sourceSets.main.resources.srcDirs[0].path
    if(file("$dbPropertiesPath/properties/jdbc.properties").exists()){
        file("$dbPropertiesPath/properties/jdbc.properties").withInputStream { inputStream ->
            properties.load(inputStream)
        }
    }else{
        println('## 警告：src/main/resources/properties/jdbc.properties没有找到')
    }
    properties
}

war{
    archiveName="${baseName}-${project.version}.${extension}"
}

// 配置资源目录
sourceSets {
    main {
        resources {
            srcDir("src/main/resources")
        }
    }
}

test {
    include '**/*Test.class'
}

convertSwagger2markup {
    dependsOn clean,test
    inputDir swaggerOutputDir
    examplesDir asciiDocOutputDir
    pathsGroupedBy io.github.robwin.swagger2markup.GroupBy.TAGS
}


asciidoctor {
    dependsOn convertSwagger2markup
    //指定asciidoctorj版本
    this.version='1.5.4'
    sources {
        include 'index.adoc'
    }
    backends = ['html5', 'pdf']
    attributes = [
            doctype: 'book',
            'source-highlighter': 'coderay',
            toc: 'left',
            toclevels: '3',
            numbered: '',
            sectlinks: '',
            sectanchors: '',
            hardbreaks: '',
            generated: asciiDocOutputDir
    ]
}

flyway {
    def prop = getDbProperties()
    user = prop.getProperty('jdbc.username')
    url = prop.getProperty('jdbc.url')
    password = prop.getProperty('jdbc.password')
    locations = ["filesystem:db/migration"]
}

repositories {
    mavenCentral()
    maven {
        url 'https://repo.spring.io/libs-milestone'
    }
}

//统一编码为utf-8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

//依赖
dependencies {

    //maven仓库中心没有的jar，则放入libs目录下
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // 日志
    compile 'ch.qos.logback:logback-classic:1.1.1'

    // 数据库
    compile 'mysql:mysql-connector-java:6.0.6'
    // JDBC连接池
    compile 'c3p0:c3p0:0.9.1.2'

    // DAO: MyBatis
    compile 'org.mybatis:mybatis:3.4.2'
    compile 'org.mybatis:mybatis-spring:1.3.1'


    // Servlet web
    compile 'taglibs:standard:1.1.2'
    compile 'jstl:jstl:1.2'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.7'
    compile 'javax.servlet:javax.servlet-api:3.1.0'

    // Spring核心
    compile 'org.springframework:spring-beans:4.3.7.RELEASE'
    compile 'org.springframework:spring-orm:4.3.7.RELEASE'
    compile 'org.springframework:spring-context-support:4.3.7.RELEASE'

    // Spring DAO层
    compile 'org.springframework:spring-jdbc:4.3.7.RELEASE'
    compile 'org.springframework:spring-tx:4.3.7.RELEASE'

    // Spring web
    compile 'org.springframework:spring-web:4.3.7.RELEASE'
    compile 'org.springframework:spring-webmvc:4.3.7.RELEASE'

    // redis客户端:Jedis
    compile 'redis.clients:jedis:2.7.3'
    compile 'com.dyuproject.protostuff:protostuff-core:1.0.8'
    compile 'com.dyuproject.protostuff:protostuff-runtime:1.0.8'

    // Map工具类
    compile 'commons-collections:commons-collections:3.2'



    compile 'com.github.pagehelper:pagehelper:5.0.0'
    // 鉴权
    compile 'org.apache.shiro:shiro-spring:1.3.2'
    compile 'org.apache.shiro:shiro-web:1.3.2'


//    compile 'org.apache.tomcat:tomcat-jdbc:8.5.12'
    // 邮件
    compile 'javax.mail:mail:1.4.7'
    compile 'org.aspectj:aspectjweaver:1.8.10'

    // 文件上传
    compile 'commons-fileupload:commons-fileupload:1.3.2'

    compile 'tk.mybatis:mapper:3.4.0'


    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.8.7'

    //swagger
    compile "io.springfox:springfox-swagger2:2.6.1"
    compile 'io.springfox:springfox-swagger-ui:2.6.1'
    compile 'io.springfox:springfox-staticdocs:2.6.1'
    compile 'io.github.robwin:assertj-swagger:0.5.0'

    //freeMaker
    compile 'com.github.lzzzzzz:code-generator:v1.04.2'
    //Gson解析
    compile 'com.google.code.gson:gson:2.6.2'

    //已下这些依赖有重复
    compile 'com.github.fge:jackson-coreutils:1.8'
    compile 'commons-codec:commons-codec:1.9'
    compile 'com.googlecode.libphonenumber:libphonenumber:6.2'
    compile 'com.google.code.findbugs:jsr305:3.0.0'
    compile 'org.apache.httpcomponents:httpcore:4.4.3'
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'org.apache.httpcomponents:httpclient:4.5.1'

    // 添加单元测试库
    testCompile 'junit:junit:4.12'
    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc:1.1.2.RELEASE'
    testCompile "org.springframework.restdocs:spring-restdocs-restassured:1.1.0.RC1"
    testCompile 'com.fasterxml.jackson.module:jackson-module-jsonSchema:2.8.7'
    testCompile 'com.jayway.restassured:rest-assured:2.9.0'
    testCompile 'org.springframework:spring-test:4.3.7.RELEASE'
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'com.jayway.restassured:json-schema-validator:2.9.0'
    testCompile 'com.jayway.restassured:spring-mock-mvc:2.9.0'




    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.5'
    mybatisGenerator 'mysql:mysql-connector-java:6.0.6'
    mybatisGenerator 'tk.mybatis:mapper:3.4.0'

}


task copyProperties(type:Copy){
    def fromPath = 'environment/' + project["env"]
    def propertiesDest = 'src/main/resources/properties/'
    println "拷贝：" + fromPath + '*.properties文件到' + propertiesDest
    from fromPath
    into propertiesDest
    include '**/*.properties'
}

task copySpringWeb(type:Copy){
    def fromPath = 'environment/' + project["env"]
    def springDest = 'src/main/resources/spring/'
    println "拷贝：" + fromPath + '*.xml文件到' + springDest
    from fromPath
    into springDest
    include '**/*.xml'
}

// 初始化环境
task initEnv(type: Copy) {
    println('start initial environment')
    dependsOn copyProperties
    dependsOn copySpringWeb
}

task mybatisGenerate  {
    doLast {
        def prop = getDbProperties()

        ant.properties['targetProject'] = projectDir.path
        ant.properties['driverClass'] = prop.getProperty('jdbc.driverClassName')
        ant.properties['connectionURL'] = prop.getProperty('jdbc.url')
        ant.properties['userId'] = prop.getProperty('jdbc.username')
        ant.properties['password'] = prop.getProperty('jdbc.password')
        ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
        ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
        ant.properties['modelPackage'] = this.modelPackage
        ant.properties['mapperPackage'] = this.mapperPackage
        ant.properties['sqlMapperPackage'] = this.sqlMapperPackage

        ant.taskdef(
                name: 'mbgenerator',
                classname: 'org.mybatis.generator.ant.GeneratorAntTask',
                classpath: configurations.mybatisGenerator.asPath
        )
        ant.mbgenerator(overwrite: true,
                configfile: 'db/generatorConfig.xml', verbose: true) {
            propertyset {
                propertyref(name: 'targetProject')
                propertyref(name: 'userId')
                propertyref(name: 'driverClass')
                propertyref(name: 'connectionURL')
                propertyref(name: 'password')
                propertyref(name: 'src_main_java')
                propertyref(name: 'src_main_resources')
                propertyref(name: 'modelPackage')
                propertyref(name: 'mapperPackage')
                propertyref(name: 'sqlMapperPackage')
            }
        }
    }
}



